From: root <root@dbfw>
Date: Wed, 10 Nov 2021 20:39:55 +0300
Subject: mysql buffer patch

---
 dbshield/dbms/mysql.go      |  84 +++++++++++++++++++------
 dbshield/dbms/mysql_test.go | 145 +++++++++++++++++---------------------------
 2 files changed, 121 insertions(+), 108 deletions(-)

diff --git a/dbshield/dbms/mysql.go b/dbshield/dbms/mysql.go
index b20919f..e16df43 100644
--- a/dbshield/dbms/mysql.go
+++ b/dbshield/dbms/mysql.go
@@ -3,6 +3,7 @@ package dbms
 import (
 	"bytes"
 	"crypto/tls"
+	"errors"
 	"io"
 	"net"
 	"time"
@@ -11,6 +12,8 @@ import (
 	"github.com/nim4/DBShield/dbshield/sql"
 )
 
+const maxMySQLPayloadLen = 1<<24 - 1
+
 //MySQL DBMS
 type MySQL struct {
 	client      net.Conn
@@ -52,9 +55,8 @@ func (m *MySQL) DefaultPort() uint {
 
 //Handler gets incoming requests
 func (m *MySQL) Handler() error {
-	defer handlePanic()
+	//defer handlePanic()
 	defer m.Close()
-
 	success, err := m.handleLogin()
 	if err != nil {
 		return err
@@ -65,8 +67,8 @@ func (m *MySQL) Handler() error {
 	}
 	for {
 		var buf []byte
-		buf, err = m.reader(m.client)
-		if err != nil {
+		buf, err = ReadPacket(m.client)
+		if err != nil || len(buf) < 5 {
 			return err
 		}
 		data := buf[4:]
@@ -108,19 +110,19 @@ func (m *MySQL) Handler() error {
 
 func (m *MySQL) handleLogin() (success bool, err error) {
 	//Receive Server Greeting
-	err = readWrite(m.server, m.client, m.reader)
+	err = readWrite(m.server, m.client, ReadPacket)
 	if err != nil {
 		return
 	}
 
 	//Receive Login Request
-	buf, err := m.reader(m.client)
+	buf, err := ReadPacket(m.client)
 	if err != nil {
 		return
 	}
 	data := buf[4:]
 
-	m.username, m.currentDB = getUsernameDB(data)
+	m.username, m.currentDB = MySQLGetUsernameDB(data)
 
 	//check if ssl is required
 	ssl := (data[1] & 0x08) == 0x08
@@ -132,13 +134,15 @@ func (m *MySQL) handleLogin() (success bool, err error) {
 	}
 	if ssl {
 		m.client, m.server, err = turnSSL(m.client, m.server, m.certificate)
-
-		buf, err = m.reader(m.client)
+		if err != nil {
+			return
+		}
+		buf, err = ReadPacket(m.client)
 		if err != nil {
 			return
 		}
 		data = buf[4:]
-		m.username, m.currentDB = getUsernameDB(data)
+		m.username, m.currentDB = MySQLGetUsernameDB(data)
 
 		//Send Login Request
 		_, err = m.server.Write(buf)
@@ -150,23 +154,23 @@ func (m *MySQL) handleLogin() (success bool, err error) {
 
 	if len(m.currentDB) != 0 { //db Selected
 		//Receive OK
-		buf, err = m.reader(m.server)
+		buf, err = ReadPacket(m.server)
 		if err != nil {
 			return
 		}
 	} else {
 		//Receive Auth Switch Request
-		err = readWrite(m.server, m.client, m.reader)
+		err = readWrite(m.server, m.client, ReadPacket)
 		if err != nil {
 			return
 		}
 		//Receive Auth Switch Response
-		err = readWrite(m.client, m.server, m.reader)
+		err = readWrite(m.client, m.server, ReadPacket)
 		if err != nil {
 			return
 		}
 		//Receive Response Status
-		buf, err = m.reader(m.server)
+		buf, err = ReadPacket(m.server)
 		if err != nil {
 			return
 		}
@@ -178,13 +182,51 @@ func (m *MySQL) handleLogin() (success bool, err error) {
 
 	//Send Response Status
 	_, err = m.client.Write(buf)
-	if err != nil {
-		return
-	}
 	return
 }
 
-func getUsernameDB(data []byte) (username, db []byte) {
+//MySQLReadPacket handles reading mysql packets
+func MySQLReadPacket(src io.Reader) ([]byte, error) {
+	data := make([]byte, maxMySQLPayloadLen)
+	var prevData []byte
+	for {
+
+		n, err := src.Read(data)
+		if err != nil {
+			return nil, err
+		}
+		data = data[:n]
+
+		pktLen := int(uint32(data[0]) | uint32(data[1])<<8 | uint32(data[2])<<16)
+
+		if pktLen == 0 {
+			if prevData == nil {
+				return nil, errors.New("Malform Packet")
+			}
+
+			return prevData, nil
+		}
+
+		eof := true
+		if len(data) > 8 {
+			tail := data[len(data)-9:]
+			eof = tail[0] == 5 && tail[1] == 0 && tail[2] == 0 && tail[4] == 0xfe
+		}
+
+		if eof {
+			if prevData == nil {
+				return data, nil
+			}
+
+			return append(prevData, data...), nil
+		}
+
+		prevData = append(prevData, data...)
+	}
+}
+
+//MySQLGetUsernameDB parse packet and gets username and db name
+func MySQLGetUsernameDB(data []byte) (username, db []byte) {
 	if len(data) < 33 {
 		return
 	}
@@ -195,7 +237,11 @@ func getUsernameDB(data []byte) (username, db []byte) {
 	logger.Debugf("Username: %s", username)
 	pos += nullByteIndex + 22
 	nullByteIndex = bytes.IndexByte(data[pos:], 0x00)
-	if nullByteIndex != 0 {
+
+	//Check if DB name is selected
+	dbSelectedCheck := len(data) > nullByteIndex+pos+1
+
+	if nullByteIndex != 0 && dbSelectedCheck {
 		db = data[pos : nullByteIndex+pos]
 		logger.Debugf("Database: %s", db)
 	}
diff --git a/dbshield/dbms/mysql_test.go b/dbshield/dbms/mysql_test.go
index a1e53f7..8b49cb4 100644
--- a/dbshield/dbms/mysql_test.go
+++ b/dbshield/dbms/mysql_test.go
@@ -1,112 +1,79 @@
 package dbms_test
 
 import (
-	"errors"
-	"io"
+	"bytes"
 	"testing"
 
 	"github.com/nim4/DBShield/dbshield/dbms"
-	"github.com/nim4/mock"
 )
 
-var sampleMySQL = [...][]byte{
-	{
-		0x5b, 0x00, 0x00, 0x00, 0x0a, 0x35, 0x2e, 0x37, 0x2e, 0x31, 0x35, 0x2d,
-		0x30, 0x75, 0x62, 0x75, 0x6e, 0x74, 0x75, 0x30, 0x2e, 0x31, 0x36, 0x2e,
-		0x30, 0x34, 0x2e, 0x31, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x51, 0x3e, 0x7e,
-		0x3d, 0x45, 0x28, 0x0b, 0x08, 0x00, 0xff, 0xff, 0x08, 0x02, 0x00, 0xff,
-		0xc1, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-		0x4b, 0x1d, 0x59, 0x6f, 0x2e, 0x04, 0x67, 0x32, 0x6a, 0x64, 0x1e, 0x44,
-		0x00, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76,
-		0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x00,
-	}, //Server
-	{
-		0x6b, 0x00, 0x00, 0x01, 0x8d, 0xa2, 0x0a, 0x00, 0x00, 0x00, 0x00, 0xc0,
-		0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-		0x72, 0x6f, 0x6f, 0x74, 0x00, 0x14, 0x41, 0x2b, 0x1f, 0xb9, 0x84, 0xf8,
-		0x3c, 0x2a, 0x0c, 0xd8, 0x27, 0x19, 0xb0, 0x45, 0x06, 0xbd, 0xf7, 0x9d,
-		0x84, 0x86, 0x74, 0x65, 0x73, 0x74, 0x00, 0x6d, 0x79, 0x73, 0x71, 0x6c,
-		0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73,
-		0x77, 0x6f, 0x72, 0x64, 0x00, 0x15, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65,
-		0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x07, 0x6d, 0x79, 0x73, 0x71,
-		0x6c, 0x6e, 0x64,
-	},
-	{0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00},
-	{
-		0x21, 0x00, 0x00, 0x00, 0x03, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x20,
-		0x2a, 0x20, 0x46, 0x52, 0x4f, 0x4d, 0x20, 0x50, 0x65, 0x72, 0x73, 0x6f,
-		0x6e, 0x73, 0x20, 0x57, 0x48, 0x45, 0x52, 0x45, 0x20, 0x69, 0x64, 0x3d,
-		0x31,
-	},
-	{
-		0x01, 0x00, 0x00, 0x01, 0x03, 0x2c, 0x00, 0x00, 0x02, 0x03, 0x64, 0x65,
-		0x66, 0x04, 0x74, 0x65, 0x73, 0x74, 0x07, 0x50, 0x65, 0x72, 0x73, 0x6f,
-		0x6e, 0x73, 0x07, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x02, 0x69,
-		0x64, 0x02, 0x69, 0x64, 0x0c, 0x3f, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
-		0x03, 0x42, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x03, 0x03, 0x64, 0x65,
-		0x66, 0x04, 0x74, 0x65, 0x73, 0x74, 0x07, 0x50, 0x65, 0x72, 0x73, 0x6f,
-		0x6e, 0x73, 0x07, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x04, 0x4e,
-		0x61, 0x6d, 0x65, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x0c, 0x08, 0x00, 0x19,
-		0x00, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
-		0x04, 0x03, 0x64, 0x65, 0x66, 0x04, 0x74, 0x65, 0x73, 0x74, 0x07, 0x50,
-		0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x07, 0x50, 0x65, 0x72, 0x73, 0x6f,
-		0x6e, 0x73, 0x04, 0x43, 0x69, 0x74, 0x79, 0x04, 0x43, 0x69, 0x74, 0x79,
-		0x0c, 0x08, 0x00, 0x19, 0x00, 0x00, 0x00, 0xfd, 0x01, 0x10, 0x00, 0x00,
-		0x00, 0x05, 0x00, 0x00, 0x05, 0xfe, 0x00, 0x00, 0x02, 0x00, 0x1e, 0x00,
-		0x00, 0x06, 0x01, 0x31, 0x0d, 0x35, 0x37, 0x63, 0x62, 0x32, 0x62, 0x62,
-		0x32, 0x35, 0x36, 0x65, 0x36, 0x34, 0x0d, 0x35, 0x37, 0x63, 0x62, 0x32,
-		0x62, 0x62, 0x32, 0x35, 0x36, 0x65, 0x61, 0x30, 0x05, 0x00, 0x00, 0x07,
-		0xfe, 0x00, 0x00, 0x02, 0x00,
-	},
-	{0x01, 0x00, 0x00, 0x00, 0x01},
-}
+func TestMySQLGetUsernameDB(t *testing.T) {
+	// GetUsernameDB gets buf[4:] (remove leading 4 bytes from packet dump)
+
+	u, d := dbms.MySQLGetUsernameDB([]byte{
+		5, 162, 43, 0, 1, 0, 0, 0, 45, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		0, 0, 0, 0, 119, 112, 0, 20, 220, 242, 53, 124, 75, 14, 62, 51,
+		39, 210, 196, 162, 213, 205, 209, 232, 229, 71, 70, 62, 109, 121, 115, 113,
+		108, 95, 110, 97, 116, 105, 118, 101, 95, 112, 97, 115, 115, 119, 111, 114,
+		100, 0,
+	})
+	if string(u) != "wp" {
+		t.Error("Expected 'wp' username got", string(u))
+	}
+	if len(d) != 0 {
+		t.Error("Expected empty db name got", string(d))
+	}
+
+	u, d = dbms.MySQLGetUsernameDB([]byte{
+		13, 162, 43, 0, 1, 0, 0, 0, 45, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		0, 0, 0, 0, 119, 112, 0, 20, 0, 205, 124, 7, 125, 243, 111, 168,
+		162, 10, 54, 115, 147, 159, 57, 126, 109, 123, 162, 138, 119, 112, 0, 109,
+		121, 115, 113, 108, 95, 110, 97, 116, 105, 118, 101, 95, 112, 97, 115, 115,
+		119, 111, 114, 100, 0,
+	})
 
-var mysqlCount int
+	if string(u) != "wp" {
+		t.Error("Expected 'wp' username got", string(u))
+	}
+	if string(u) != "wp" {
+		t.Error("Expected 'wp' db name", string(d))
+	}
+
+	u, d = dbms.MySQLGetUsernameDB([]byte{
+		13, 162, 43, 0, 1, 0, 0, 0, 45, 0, 0, 0,
+		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		0, 0, 0, 0,
+	})
 
-func mysqlDummyReader(c io.Reader) (buf []byte, err error) {
-	if mysqlCount < len(sampleMySQL) {
-		buf = sampleMySQL[mysqlCount]
-		mysqlCount++
-	} else {
-		err = errors.New("EOF")
+	if len(u) != 0 || len(d) != 0 {
+		t.Error("Expected empty username & db name got", string(u), string(d))
 	}
-	return
 }
 
-func TestMySQL(t *testing.T) {
-	var m = dbms.MySQL{}
-	port := m.DefaultPort()
-	if m.DefaultPort() != 3306 {
-		t.Error("Expected 3306, got ", port)
+func TestMySQLReadPacket(t *testing.T) {
+	const maxPayloadLen = 1<<24 - 1
+	var buf [maxPayloadLen]byte
+	reader := bytes.NewReader(buf[:])
+	b, err := dbms.MySQLReadPacket(reader)
+	if err != nil {
+		t.Error("Got error", err)
 	}
-	err := m.SetCertificate("", "")
-	if err == nil {
-		t.Error("Expected error")
+	if bytes.Compare(b, buf[:]) != 0 {
+		t.Error("Unexpected output")
 	}
-	m.SetReader(mysqlDummyReader)
-	var s mock.ConnMock
-	m.SetSockets(s, s)
-	err = m.Handler()
+	var eofReader bytes.Buffer
+	_, err = dbms.MySQLReadPacket(&eofReader)
 	if err != nil {
 		t.Error("Got error", err)
 	}
-	m.Close()
 }
 
-func BenchmarkMySQL(b *testing.B) {
-	b.ReportAllocs()
-	b.ResetTimer()
-	var s mock.ConnMock
-	var m = dbms.MySQL{}
-	m.SetReader(mysqlDummyReader)
-	m.SetSockets(s, s)
+func BenchmarkMySQLReadPacket(b *testing.B) {
+	var buf [1024]byte
 	for i := 0; i < b.N; i++ {
-		mysqlCount = 0
-		err := m.Handler()
-		if err != nil {
-			b.Fatal(err)
-		}
-		m.Close()
+		s := bytes.NewReader(buf[:])
+		dbms.MySQLReadPacket(s)
 	}
 }
